<?xml version="1.0" encoding="UTF-8"?>
<launch>

<!--The first line, "rosparam", loads the controller settings to the parameter server by loading a yaml configuration file (discussed in the next section).

The controller_spawner node starts the two joint position controllers for the RRBot by running a python script that makes a service call to the ros_control controller manager. The service calls tell the controller manager which controllers you want. It also loads a third controller that publishes the joint states of all the joints with hardware_interfaces and advertises the topic on /joint_states. The spawner is just a helper script for use with roslaunch.

The final line starts a robot_state_publisher node that simply listens to /joint_states messages from the joint_state_controller then publishes the transforms to /tf. This allows you to see your simulated robot in Rviz as well as do other tasks.-->

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find cygnus_control)/config/cygnus_control.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner"
    pkg="controller_manager"
    type="spawner" respawn="false"
    output="screen" ns="/cygnus"
    args="joint_state_controller
      motor1_velocity_controller motor2_velocity_controller motor3_velocity_controller motor4_velocity_controller"
  />

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find cygnus_description)/model/model.urdf'"/>
    <remap from="/joint_states" to="/cygnus/joint_states" />
  </node>

</launch>


